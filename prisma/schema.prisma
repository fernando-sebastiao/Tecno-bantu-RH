// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Carreira {
  id            String        @id @default(uuid())
  nome_carreira String        @unique @map("nome")
  regime        Regime
  subcarreira   SubCarreira[]
  cateroria     CategoriaRH[]

  @@map("carreira")
}

model SubCarreira {
  id               String        @id @default(uuid())
  nome_SubCarreira String        @map("nome")
  Id_carreira      String?       @map("carreiraId")
  Carreira         Carreira?     @relation(fields: [Id_carreira], references: [id])
  categoria        CategoriaRH[]

  @@map("subcarreira")
}

model CategoriaRH {
  id             String        @id @default(uuid())
  nome_categoria String        @map("nome")
  Carreira       Carreira?     @relation(fields: [Id_carreira], references: [id])
  Id_carreira    String?       @map("carreiraId")
  SubCarreira    SubCarreira?  @relation(fields: [Id_subCarreira], references: [id])
  Id_subCarreira String?       @map("subCarreiraId")
  funcionario    Funcionario[]

  @@map("categoria")
}

model Funcao {
  id          String        @id @default(uuid())
  nome_funcao String        @map("nome")
  funcionario Funcionario[]

  @@map("funcao")
}

model Funcionario {
  id                          String                    @id @default(uuid())
  nome_completo               String                    @map("nomeCompleto")
  nome_pai                    String                    @map("nomePai")
  nome_mae                    String                    @map("nomeMae")
  nascimento                  DateTime
  email                       String                    @unique
  genero                      Genero
  // id_pais       String 
  tipo_identificacao          Identificacao
  num_identificacao           String
  nivel_academico             NIVEL_ACADEMICO
  avatar                      String?
  telefone1                   String                    @unique
  telefone2                   String?                   @unique
  linkedin                    String?
  whatsApp                    String?
  instagram                   String?
  bairro                      String
  rua                         String
  Funcao                      Funcao?                   @relation(fields: [id_funcao], references: [id])
  id_funcao                   String?                   @map("funcaoId")
  Categoria                   CategoriaRH?              @relation(fields: [id_categoria], references: [id])
  id_categoria                String?                   @map("categoriaId")
  iban                        String?
  Id_banco                    String?                   @map("bancoId")
  dadosprofissionais          DadosProfissionais[]
  formacoes                   Formacoes[]
  esperiencialaboral          ExperiencialLaboral[]
  departamentosComoChefe      Departamento[]            @relation("FuncionarioChefe")
  departamentosComoSupervisor Departamento[]            @relation("FuncionarioSupervisor")
  funcionariodepartamento     FuncionarioDepartamento[]
  Banco                       Banco?                    @relation(fields: [Id_banco], references: [id])

  @@map("funcionario")
}

model DadosProfissionais {
  id              String   @id @default(uuid())
  data_admissao   DateTime
  numero_despacho String?
  data_despacho   DateTime
  contrato        Contrato

  Funcionario    Funcionario? @relation(fields: [Id_funcionario], references: [id])
  Id_funcionario String?      @map("funcionarioId")

  @@map("DadosProfissionais")
}

model Formacoes {
  id             String       @id @default(uuid())
  ano_inicio     DateTime
  ano_termino    DateTime
  formacao       String
  pais           String
  instituicao    String
  Funcionario    Funcionario? @relation(fields: [Id_funcionario], references: [id])
  Id_funcionario String?      @map("funcionarioId")

  @@map("formacoes")
}

model Publicacoes {
  id       String   @id @default(uuid())
  titulo   String
  entidade String
  ano      DateTime
  tipo     Tipo

  @@map("publicacoes")
}

//All status

enum Tipo {
  livro
  cientifico
  outro
}

model ExperiencialLaboral {
  id             String       @id @default(uuid())
  ano_inicio     DateTime
  ano_termino    DateTime
  funcao         String
  instituicao    String
  pais           String?
  Funcionario    Funcionario? @relation(fields: [Id_funcionario], references: [id])
  Id_funcionario String?      @map("funcionarioId")
}

model Departamento {
  id                        String       @id @default(uuid())
  nome_departamento         String
  Id_funcionario_chefe      String?
  Id_funcionario_supervisor String?
  funcionario_chefe         Funcionario? @relation("FuncionarioChefe", fields: [Id_funcionario_chefe], references: [id])
  funcionario_supervisor    Funcionario? @relation("FuncionarioSupervisor", fields: [Id_funcionario_supervisor], references: [id])

  funcionariodepartamento FuncionarioDepartamento[]
}

model FuncionarioDepartamento {
  id              String        @id @default(uuid())
  Departamento    Departamento? @relation(fields: [Id_departamento], references: [id])
  Id_departamento String?       @map("departamentoId")
  Funcionario     Funcionario?  @relation(fields: [Id_funcionario], references: [id])
  Id_funcionario  String?       @map("funcionarioId")
}

model Banco {
  id          String        @id @default(uuid())
  nome_banco  String        @map("nome")
  codigo      String
  sigla       String
  funcionario Funcionario[]

  @@map("banco")
}

enum Contrato {
  CTD
  CAP
}

enum NIVEL_ACADEMICO {
  Base
  Medio
  Universitario
  Licenciado
  Mestrado
  Doctoramento
}

enum Identificacao {
  BI
  Passaporte
  Residente
  Outro
}

enum Regime {
  geral
  especial
}

enum Genero {
  masculino
  femenino
}
